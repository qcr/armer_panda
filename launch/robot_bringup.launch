<?xml version="1.0" ?>
<launch>
  <arg name="robot_ip" default="172.16.0.2" />
  <arg name="load_gripper" default="true" />
  <arg name="internal_controller" default="cartesian_impedance" />
  <arg name="config_path" default="$(find armer_panda)/cfg" doc="The path to the armer_panda config" />
  <arg name="config_name" default="panda" doc="The name of the config file" />
  <arg name="sim" default="false" />

  <!-- Handle configuration input -->
  <arg name="config" default="$(arg config_path)/$(arg config_name)_sim.yaml" if="$(arg sim)"/>
  <arg name="config" default="$(arg config_path)/$(arg config_name)_real.yaml" unless="$(arg sim)"/>

  <!-- Additional arguments for definiing the robot's custom description -->
  <arg name="description_root" default="example" />
  <arg name="description_key" default="panda" />
  <arg name="xacro_name" default="standard_hand_env.xacro" if="$(arg load_gripper)"/>
  <arg name="xacro_name" default="standard_env.xacro" unless="$(arg load_gripper)"/>

  <!-- Load robot description from URDF -->
  <!-- NOTE: requires the armer_descriptions package -->
  <include file="$(find armer_descriptions)/launch/description.launch">
    <arg name="description_root" value="$(arg description_root)" />
    <arg name="description_key" value="$(arg description_key)" />
    <arg name="xacro_name" value="$(arg xacro_name)" />
  </include>

  <!-- NEW Version -->
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find franka_description)/robots/panda.urdf.xacro' hand:=$(arg load_gripper)" /> -->
  <!-- OLD (franka_ros <= 0.7.1 ) -->
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find franka_description)/robots/panda_arm_hand.urdf.xacro'" if="$(arg load_gripper)" /> -->
  <!-- <param name="robot_description" command="$(find xacro)/xacro '$(find franka_description)/robots/panda_arm.urdf.xacro'" unless="$(arg load_gripper)" /> -->

  <!-- Physical Robot -->
  <group unless="$(arg sim)">
    <!-- <arg name="config" default="$(arg config_path)/panda_real.yaml" /> -->
    <!-- <arg name="config" default="$(find armer_panda)/cfg/panda_real.yaml" /> -->

    <!-- Load gripper controllers -->
    <include file="$(find franka_gripper)/launch/franka_gripper.launch" if="$(arg load_gripper)">
        <arg name="robot_ip" value="$(arg robot_ip)" />
    </include>

    <!-- Launch franka control framework -->
    <node name="franka_control" pkg="franka_control" type="franka_control_node" output="screen" required="true">
        <rosparam command="load" file="$(find franka_control)/config/franka_control_node.yaml" />
        <rosparam param="/franka_control/internal_controller" subst_value="true">$(arg internal_controller)</rosparam>
        <param name="robot_ip" value="$(arg robot_ip)" />
    </node>

    <!-- Load default controllers (e.g., joint_states) -->
    <rosparam command="load" file="$(find armer_panda)/cfg/controllers.yaml" />
    
    <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_state_controller"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>
    <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
        <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
        <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states] </rosparam>
        <param name="rate" value="1000"/>
    </node>
    <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
        <rosparam if="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
        <rosparam unless="$(arg load_gripper)" param="source_list">[franka_state_controller/joint_states_desired] </rosparam>
        <param name="rate" value="1000"/>
        <remap from="/joint_states" to="/joint_states_desired" />
    </node>

    <!-- Load and spawn joint group velocity controller -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"  args="joint_group_velocity_controller"/>
    <node name="controller_stopped_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="--stopped position_joint_trajectory_controller --timeout 600" />
    <!-- Launch armer driver -->
    <include file="$(find armer)/launch/armer.launch">
        <arg name="config" value="$(arg config)" />
    </include>

    <node name="set_defaults" pkg="armer_panda" type="set_defaults" />

  </group>

  <!-- Simulated Robot -->
  <group if="$(arg sim)">
    <!-- <arg name="config" default="$(arg config_path)/panda_sim.yaml" /> -->

    <include file="$(find armer)/launch/armer.launch">
        <arg name="config" value="$(arg config)" />
    </include>
  </group>
</launch>
