robots:
  # This is the default namespace of all ARMer topics (update as needed)
  - name: arm 
    model: 
      # This is an array defining the robot's home position for each joint (in radians)
      qr: [0, -0.3, 0, -2.2, 0, 2.0, 0.78539816339]
      # This is the definition of the default control end-effector link (change as needed)
      gripper: panda_hand 
      # NOTE: this defines the start and stop links for definig link collision checking window
      # NOTE: this assumes the sorted links are in order (start is top of tree to stop at base)
      # NOTE: start defaults to the robot's gripper if not defined
      # NOTE: stop defaults to the robot's base link if not defined
      # The closer this is to the end-effector (set in gripper) the faster the checking will perform
      collision_check_start_link: panda_hand
      collision_check_stop_link: panda_link7
    # These two topics are input (state) and output (group velocity) topics (not needed for simulation)
    joint_state_topic: /joint_states # default
    joint_velocity_topic:  /joint_group_velocity_controller/joint_velocity # default
    # Define the names of each controller here (this may be custom depending on the robot)
    velocity_controller: joint_group_velocity_controller
    trajectory_controller: position_joint_trajectory_controller
    # These are the individual joint limits (in radians)
    qlim_max: [2.8973, 1.7628, 2.8973, -0.0698, 2.8973, 3.7525, 2.8973]
    qlim_min: [-2.8973, -1.7628, -2.8973, -3.0718, -2.8973, -0.0175, -2.8973]
    # These are individual joint speed (in radians/sec) limits
    qdlim: [2.1750, 2.1750, 2.1750, 2.1750, 2.6100, 2.6100, 2.6100]
    # This is a singularity threshold to preempt motion (where the singularity value approaches 0)
    singularity_thresh: 0.02
    # This is the path to where the named poses file:
    # NOTE: please update user name or path if different
    config_path: /home/qcr/.ros/configs/system_named_poses.yaml
# Actual backend for arm control (Swift for simulation)
backend: 
  type: roboticstoolbox.backends.swift.Swift
# readonly_backends:
#  - type: roboticstoolbox.backends.PyPlot.PyPlot
# Publish the transform from ARMer (if not provided in real robot or for simulation)
publish_transforms: true
# Enable this to see armer's main loop freqency for debugging
logging: 
  frequency: false
